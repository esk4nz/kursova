generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cities {
  id        Int         @id @default(autoincrement())
  city_name String      @unique @db.VarChar(100)
  addresses addresses[]
}

model addresses {
  id              Int           @id @default(autoincrement())
  city_id         Int
  street_name     String        @db.VarChar(150)
  building_number String        @db.VarChar(20)
  cities          cities        @relation(fields: [city_id], references: [id], onUpdate: NoAction)
  restaurants     restaurants?
}

model restaurants {
  id         Int         @id @default(autoincrement())
  id_address Int         @unique
  address    addresses    @relation(fields: [id_address], references: [id], onDelete: NoAction) 
  tables     tables[]
}

model reservations {
  id             Int                 @id @default(autoincrement())
  table_id       Int
  customer_name  String              @db.VarChar(50)
  customer_surname  String           @db.VarChar(50)
  customer_phone String              @db.VarChar(12)
  email          String?             @db.VarChar(150)
  date           String              @db.VarChar(10)
  start_time     String              @db.VarChar(5)
  end_time       String              @db.VarChar(5)
  people_count Int
  status         ReservationStatus   @default(active)
  created_by     ReservationCreator  @default(user)
  user_id        Int?

  tables         tables              @relation(fields: [table_id], references: [id], onDelete: Cascade)
  users          users?              @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@map("reservations")
}

enum ReservationStatus {
  active
  completed
  cancelled
}

enum ReservationCreator {
  user
  manager
}

model tables {
  id            Int             @id @default(autoincrement())
  table_number  Int             
  id_restaurant Int          
  capacity      Int 
  status        TableStatus     @default(free)
  reservations  reservations[] 
  restaurants   restaurants     @relation(fields: [id_restaurant], references: [id], onUpdate: NoAction)

  @@unique([id_restaurant, table_number])  
}


enum TableStatus {
  free       // Вільний
  reserved   // Заброньований
  occupied   // Зайнятий
}

model menu_items {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  description String?
  price       Decimal     @db.Decimal(10, 2)
  category_id  Int
  category    categories  @relation(fields: [category_id], references: [id])
  photoUrl    String?     @db.VarChar(255)
}

model categories {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(50) @unique
  menu_items menu_items[] 
}


model users {
  id           Int            @id @default(autoincrement())
  first_name   String       @db.VarChar(50)
  last_name    String        @db.VarChar(50)
  email        String         @unique @db.VarChar(150)
  pass         String         @db.VarChar(255)
  user_role    user_role      @default(User)
  phone_number String        @db.VarChar(12)
  reservations reservations[]
  reviews      reviews[]
}

enum user_role {
  Admin
  Manager
  User
}

model reviews {
  id           Int       @id @default(autoincrement())
  user_id      Int
  rating       Int
  comment      String?
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  edited_at    DateTime? @db.Timestamp(6)
  last_updated DateTime?
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}